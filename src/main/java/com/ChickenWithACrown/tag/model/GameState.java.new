package com.ChickenWithACrown.tag.model;

import org.bukkit.entity.Player;
import com.ChickenWithACrown.tag.TagGame;
import java.util.*;

public class GameState {
    private final TagGame plugin;
    private final Set<UUID> playersInGame = new HashSet<>();
    private final Map<UUID, Integer> playerScores = new HashMap<>();
    private UUID currentIt;
    private UUID lastIt;
    private boolean gameRunning;
    private int gameTime;
    private int powerUpTimer;
    private String currentGameMode = "classic";

    public GameState(TagGame plugin) {
        this.plugin = plugin;
    }

    public void addPlayer(Player player) {
        playersInGame.add(player.getUniqueId());
        playerScores.putIfAbsent(player.getUniqueId(), 0);
    }

    public void removePlayer(Player player) {
        playersInGame.remove(player.getUniqueId());
        if (currentIt != null && currentIt.equals(player.getUniqueId())) {
            currentIt = null;
        }
    }

    public Set<UUID> getPlayersInGame() {
        return playersInGame;
    }

    public Map<UUID, Integer> getPlayerScores() {
        return playerScores;
    }

    public UUID getCurrentIt() {
        return currentIt;
    }

    public void setCurrentIt(UUID currentIt) {
        this.currentIt = currentIt;
    }

    public UUID getLastIt() {
        return lastIt;
    }

    public void setLastIt(UUID lastIt) {
        this.lastIt = lastIt;
    }

    public boolean isGameRunning() {
        return gameRunning;
    }

    public void setGameRunning(boolean gameRunning) {
        this.gameRunning = gameRunning;
    }

    public int getGameTime() {
        return gameTime;
    }

    public void setGameTime(int gameTime) {
        this.gameTime = gameTime;
    }

    public int getPowerUpTimer() {
        return powerUpTimer;
    }

    public void setPowerUpTimer(int powerUpTimer) {
        this.powerUpTimer = powerUpTimer;
    }

    public String getCurrentGameMode() {
        return currentGameMode;
    }

    public void setCurrentGameMode(String currentGameMode) {
        this.currentGameMode = currentGameMode;
    }

    public void incrementScore(UUID playerId) {
        playerScores.merge(playerId, 1, Integer::sum);
    }

    public void reset() {
        playersInGame.clear();
        playerScores.clear();
        currentIt = null;
        lastIt = null;
        gameRunning = false;
        gameTime = 0;
        powerUpTimer = 0;
    }
} 